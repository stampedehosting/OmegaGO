name: Continuous Integration

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  lint-and-format:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Python linting tools
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 isort mypy
    
    - name: Run Python linting
      run: |
        black --check src/ automation/ scripts/
        flake8 src/ automation/ scripts/
        isort --check-only src/ automation/ scripts/
        mypy src/ automation/ scripts/ --ignore-missing-imports
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install Node dependencies
      working-directory: ./customer-portal
      run: npm ci
    
    - name: Run ESLint
      working-directory: ./customer-portal
      run: npm run lint
    
    - name: Run Prettier check
      working-directory: ./customer-portal
      run: npm run format:check

  test-python:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-asyncio pytest-cov
        pip install -r requirements.txt
    
    - name: Install Playwright
      run: |
        playwright install
        playwright install-deps
    
    - name: Run tests with coverage
      run: |
        pytest tests/ -v --cov=src --cov=automation --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: python
        name: python-${{ matrix.python-version }}

  test-frontend:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install dependencies
      working-directory: ./customer-portal
      run: npm ci
    
    - name: Run unit tests
      working-directory: ./customer-portal
      run: npm test -- --coverage --watchAll=false
    
    - name: Run build test
      working-directory: ./customer-portal
      run: npm run build
    
    - name: Upload frontend coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./customer-portal/coverage/lcov.info
        flags: frontend
        name: frontend

  integration-tests:
    runs-on: ubuntu-latest
    needs: [test-python, test-frontend]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: stampede_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-postgresql pytest-redis
    
    - name: Install Playwright
      run: |
        playwright install
        playwright install-deps
    
    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/stampede_test
        REDIS_URL: redis://localhost:6379
      run: |
        pytest tests/integration/ -v --tb=short
    
    - name: Run end-to-end tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/stampede_test
        REDIS_URL: redis://localhost:6379
      run: |
        python src/api_server.py &
        API_PID=$!
        sleep 10
        
        cd customer-portal && npm run build && npm run preview &
        FRONTEND_PID=$!
        sleep 5
        
        pytest tests/e2e/ -v --tb=short
        
        kill $API_PID $FRONTEND_PID

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Bandit security scan
      run: |
        pip install bandit
        bandit -r src/ automation/ scripts/ -f json -o bandit-report.json
    
    - name: Run Safety check
      run: |
        pip install safety
        safety check --json --output safety-report.json
    
    - name: Run npm audit
      working-directory: ./customer-portal
      run: |
        npm audit --audit-level moderate --json > npm-audit-report.json
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          customer-portal/npm-audit-report.json

  performance-tests:
    runs-on: ubuntu-latest
    needs: [test-python, test-frontend]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install locust
    
    - name: Run API performance tests
      run: |
        python src/api_server.py &
        API_PID=$!
        sleep 10
        
        locust -f tests/performance/api_load_test.py --host=http://localhost:8000 --users=10 --spawn-rate=2 --run-time=60s --headless
        
        kill $API_PID
    
    - name: Run frontend performance tests
      working-directory: ./customer-portal
      run: |
        npm ci
        npm run build
        npm run preview &
        FRONTEND_PID=$!
        sleep 5
        
        npx lighthouse http://localhost:4173 --output=json --output-path=lighthouse-report.json --chrome-flags="--headless"
        
        kill $FRONTEND_PID
    
    - name: Upload performance reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-reports
        path: |
          locust-report.html
          customer-portal/lighthouse-report.json

  docker-build:
    runs-on: ubuntu-latest
    needs: [lint-and-format, test-python, test-frontend]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build API Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile.api
        push: false
        tags: stampede-hosting/api:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./customer-portal
        file: ./docker/Dockerfile.frontend
        push: false
        tags: stampede-hosting/frontend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker containers
      run: |
        docker run -d --name api-test -p 8000:8000 stampede-hosting/api:test
        docker run -d --name frontend-test -p 3000:80 stampede-hosting/frontend:test
        
        sleep 10
        
        # Test API health endpoint
        curl -f http://localhost:8000/health || exit 1
        
        # Test frontend
        curl -f http://localhost:3000 || exit 1
        
        docker stop api-test frontend-test
        docker rm api-test frontend-test
